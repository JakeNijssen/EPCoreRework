plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

group = 'com.wolfeiii'
version = '1.2.1'
archivesBaseName = 'EPCore'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }

    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly 'org.spigotmc:spigot-api:1.19.2-R0.1-SNAPSHOT'
    compileOnly "com.github.MilkBowl:VaultAPI:1.7"
    compileOnly 'me.clip:placeholderapi:2.11.2'

    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'cloud.commandframework:cloud-paper:1.7.0'

    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

tasks {
    shadowJar {
        archiveClassifier.set('')
        relocate 'com.zaxxer', 'com.wolfeiii.epcore.libs.com.zaxxer'
        relocate 'cloud.commandframework', 'com.wolfeiii.epcore.libs.cloud.commandframework'
    }

    build {
        dependsOn(shadowJar)
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
}

artifacts {
    archives shadowJar
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
